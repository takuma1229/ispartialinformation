/content/drive/MyDrive/research_discourse_relation/discourse_relation_explainability
num_added_tokens: 16, added_special_tokens: <NOUN>,<PRONOUN>,<ADJECTIVAL-NOUN>,<PRENOUN-ADJECTIVAL>,<ADVERB>,<CONJUNCTION>,<INTERJECTION>,<VERB>,<ADJECTIVE>,<AUXILIARY-VERB>,<PARTICLE>,<PREFIX>,<SUFFIX>,<SYMBOL>,<AUXILIARY-SYMBOL>,<BLANK>
Some weights of BertForSequenceClassification were not initialized from the model checkpoint at cl-tohoku/bert-base-japanese-v3 and are newly initialized: ['classifier.bias', 'classifier.weight']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
  0%|          | 0/11 [00:00<?, ?it/s]/usr/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.
  self.pid = os.fork()
 45%|████▌     | 5/11 [00:37<00:33,  5.55s/it]
  0%|          | 0/15 [00:00<?, ?it/s]/usr/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.
  self.pid = os.fork()[00:00<?, ?it/s]





  self.pid = os.fork()[00:00<?, ?it/s]

  self.pid = os.fork()[00:00<?, ?it/s]
  7%|▋         | 1/15 [01:32<21:40, 92/usr/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.
  self.pid = os.fork()[00:00<?, ?it/s]
epoch: 0 	loss: 0.001796   	accuracy: 0.7865 	precision: 0.2677 	recall: 0.3051 	f1: 0.2843
epoch: 0 	loss: 0.026994   	accuracy: 0.7784 	precision: 0.2785 	recall: 0.3221 	f1: 0.2972






  self.pid = os.fork()[00:00<?, ?it/s]
 13%|█▎        | 2/15 [01:48<10:16, 47/usr/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.
  self.pid = os.fork()[00:00<?, ?it/s]
  5%|▍         | 4/84 [00:00<00:13,  6.06it/s]
epoch: 1 	loss: 0.001527   	accuracy: 0.8202 	precision: 0.4041 	recall: 0.4298 	f1: 0.4089






  self.pid = os.fork()[00:00<?, ?it/s]
 73%|███████▎  | 8/11 [00:00<00:00, 20.41it/s]
epoch: 2 	loss: 0.000541   	accuracy: 0.8854 	precision: 0.4579 	recall: 0.5069 	f1: 0.4791
  self.pid = os.fork()[00:00<?, ?it/s]






  self.pid = os.fork()[00:00<?, ?it/s]
 27%|██▋       | 4/15 [02:18<04:43, 25/usr/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.
  self.pid = os.fork()[00:00<?, ?it/s]
  2%|▏         | 2/84 [00:00<00:18,  4.46it/s]
epoch: 3 	loss: 0.000146   	accuracy: 0.9303 	precision: 0.7151 	recall: 0.6970 	f1: 0.7057






  self.pid = os.fork()[00:00<?, ?it/s]
 36%|███▋      | 4/11 [00:00<00:00, 12.71it/s]
epoch: 4 	loss: 0.000069   	accuracy: 0.9506 	precision: 0.7397 	recall: 0.7172 	f1: 0.7251
  self.pid = os.fork()[00:00<?, ?it/s]






  self.pid = os.fork()[00:00<?, ?it/s]
 40%|████      | 6/15 [02:48<02:55, 19/usr/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.
  self.pid = os.fork()[00:00<?, ?it/s]
  5%|▍         | 4/84 [00:00<00:12,  6.25it/s]
epoch: 5 	loss: 0.000061   	accuracy: 0.9551 	precision: 0.9510 	recall: 0.7794 	f1: 0.8329






  self.pid = os.fork()[00:00<?, ?it/s]
 36%|███▋      | 4/11 [00:00<00:00, 13.06it/s]
epoch: 6 	loss: 0.000046   	accuracy: 0.9783 	precision: 0.9736 	recall: 0.8696 	f1: 0.9040
  self.pid = os.fork()[00:00<?, ?it/s]






  self.pid = os.fork()[00:00<?, ?it/s]
 53%|█████▎    | 8/15 [03:18<02:00, 17/usr/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.
  self.pid = os.fork()[00:00<?, ?it/s]
  2%|▏         | 2/84 [00:00<00:17,  4.66it/s]
epoch: 7 	loss: 0.000039   	accuracy: 0.9903 	precision: 0.9872 	recall: 0.9647 	f1: 0.9750






  self.pid = os.fork()[00:00<?, ?it/s]
  9%|▉         | 1/11 [00:00<00:02,  3.63it/s]
epoch: 8 	loss: 0.000032   	accuracy: 0.9858 	precision: 0.7627 	recall: 0.7892 	f1: 0.7742
  self.pid = os.fork()[00:00<?, ?it/s]






  self.pid = os.fork()[00:00<?, ?it/s]
 67%|██████▋   | 10/15 [03:49<01:20, 1/usr/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.
  self.pid = os.fork()[00:00<?, ?it/s]
  1%|          | 1/84 [00:00<00:28,  2.87it/s]
epoch: 9 	loss: 0.000019   	accuracy: 0.9918 	precision: 0.9978 	recall: 0.9560 	f1: 0.9759







  self.pid = os.fork()[00:00<?, ?it/s]
epoch: 10 	loss: 0.000015   	accuracy: 0.9925 	precision: 0.9935 	recall: 0.9615 	f1: 0.9766
 73%|███████▎  | 11/15 [04:04<01:03, 1/usr/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.
  self.pid = os.fork()[00:00<?, ?it/s]
 10%|▉         | 8/84 [00:01<00:13,  5.72it/s]






  self.pid = os.fork()[00:00<?, ?it/s]
 80%|████████  | 12/15 [04:19<00:46, 1/usr/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.
  self.pid = os.fork()[00:00<?, ?it/s]
  2%|▏         | 2/84 [00:00<00:16,  4.93it/s]
epoch: 11 	loss: 0.000013   	accuracy: 0.9933 	precision: 0.9929 	recall: 0.9631 	f1: 0.9771







  self.pid = os.fork()[00:00<?, ?it/s]
epoch: 12 	loss: 0.000011   	accuracy: 0.9940 	precision: 0.9938 	recall: 0.9633 	f1: 0.9777
epoch: 12 	loss: 0.040048   	accuracy: 0.8982 	precision: 0.8634 	recall: 0.7967 	f1: 0.7903
 87%|████████▋ | 13/15 [04:34<00:30, 1/usr/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.
  self.pid = os.fork()[00:00<?, ?it/s]






  self.pid = os.fork()[00:00<?, ?it/s]
 93%|█████████▎| 14/15 [04:49<00:15, 1/usr/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.
  self.pid = os.fork()[00:00<?, ?it/s]
  4%|▎         | 3/84 [00:00<00:14,  5.70it/s]
epoch: 13 	loss: 0.000010   	accuracy: 0.9940 	precision: 0.9938 	recall: 0.9633 	f1: 0.9777






  self.pid = os.fork()[00:00<?, ?it/s]
  9%|▉         | 1/11 [00:00<00:02,  4.01it/s]
epoch: 14 	loss: 0.000010   	accuracy: 0.9940 	precision: 0.9897 	recall: 0.9679 	f1: 0.9778
  0%|          | 0/11 [00:00<?, ?it/s]/usr/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.
  self.pid = os.fork()
  0%|          | 0/11 [00:00<?, ?it/s]/usr/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.
  self.pid = os.fork()
No traceback available to show.
{'best-epoch': 9, 'loss': 0.04727902298881894, 'accuracy': 0.8333333333333334, 'precision': 0.8927292167869554, 'recall': 0.6567897165458142, 'f1': 0.7411904761904762}
OptimizedModule(
  (_orig_mod): BertForSequenceClassification(
    (bert): BertModel(
      (embeddings): BertEmbeddings(
        (word_embeddings): Embedding(32784, 768)
        (position_embeddings): Embedding(512, 768)
        (token_type_embeddings): Embedding(2, 768)
        (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
        (dropout): Dropout(p=0.1, inplace=False)
      )
      (encoder): BertEncoder(
        (layer): ModuleList(
          (0-11): 12 x BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1, inplace=False)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1, inplace=False)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
              (intermediate_act_fn): GELUActivation()
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1, inplace=False)
            )
          )
        )
      )
      (pooler): BertPooler(
        (dense): Linear(in_features=768, out_features=768, bias=True)
        (activation): Tanh()
      )
    )
    (dropout): Dropout(p=0.1, inplace=False)
    (classifier): Linear(in_features=768, out_features=5, bias=True)
  )
)
<class 'torch._dynamo.eval_frame.OptimizedModule'>
<class 'transformers.models.bert.modeling_bert.BertForSequenceClassification'>