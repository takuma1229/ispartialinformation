
/content/drive/MyDrive/research_discourse_relation/discourse_relation_explainability
/usr/local/lib/python3.10/dist-packages/huggingface_hub/utils/_token.py:88: UserWarning:
The secret `HF_TOKEN` does not exist in your Colab secrets.
To authenticate with the Hugging Face Hub, create a token in your settings tab (https://huggingface.co/settings/tokens), set it as secret in your Google Colab and restart your session.
You will be able to reuse this secret in all of your notebooks.
Please note that authentication is recommended but still optional to access public models or datasets.
  warnings.warn(
num_added_tokens: 16, added_special_tokens: <NOUN>,<PRONOUN>,<ADJECTIVAL-NOUN>,<PRENOUN-ADJECTIVAL>,<ADVERB>,<CONJUNCTION>,<INTERJECTION>,<VERB>,<ADJECTIVE>,<AUXILIARY-VERB>,<PARTICLE>,<PREFIX>,<SUFFIX>,<SYMBOL>,<AUXILIARY-SYMBOL>,<BLANK>
Some weights of BertForSequenceClassification were not initialized from the model checkpoint at cl-tohoku/bert-base-japanese-v3 and are newly initialized: ['classifier.bias', 'classifier.weight']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
/usr/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.
  self.pid = os.fork()



  0%|          | 0/15 [00:00<?, ?it/s]/usr/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.
  self.pid = os.fork()[00:00<?, ?it/s]
epoch: None 	loss: 0.065226   	accuracy: 0.2575 	precision: 0.1848 	recall: 0.2304 	f1: 0.1233




  self.pid = os.fork()[00:00<?, ?it/s]
  self.pid = os.fork()[00:00<?, ?it/s]
  7%|▋         | 1/15 [01:40<23:20, 10/usr/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.
  self.pid = os.fork()[00:00<?, ?it/s]
epoch: 0 	loss: 0.001795   	accuracy: 0.7865 	precision: 0.2677 	recall: 0.3051 	f1: 0.2843
epoch: 0 	loss: 0.026975   	accuracy: 0.7784 	precision: 0.2785 	recall: 0.3221 	f1: 0.2972





  self.pid = os.fork()[00:00<?, ?it/s]
 13%|█▎        | 2/15 [01:53<10:41, 49/usr/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.
  self.pid = os.fork()[00:00<?, ?it/s]
epoch: 1 	loss: 0.001464   	accuracy: 0.8345 	precision: 0.4052 	recall: 0.4271 	f1: 0.4116
epoch: 1 	loss: 0.022191   	accuracy: 0.8204 	precision: 0.4163 	recall: 0.4692 	f1: 0.4395





  self.pid = os.fork()[00:00<?, ?it/s]
 20%|██        | 3/15 [02:07<06:38, 33/usr/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.
  self.pid = os.fork()[00:00<?, ?it/s]
  1%|          | 1/84 [00:00<00:24,  3.33it/s]
epoch: 2 	loss: 0.001042   	accuracy: 0.8854 	precision: 0.4643 	recall: 0.4796 	f1: 0.4708






  self.pid = os.fork()[00:00<?, ?it/s]
 27%|██▋       | 4/15 [02:21<04:41, 25/usr/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.
  self.pid = os.fork()[00:00<?, ?it/s]
  1%|          | 1/84 [00:00<00:24,  3.43it/s]
epoch: 3 	loss: 0.000209   	accuracy: 0.9199 	precision: 0.6682 	recall: 0.5861 	f1: 0.5704






  self.pid = os.fork()[00:00<?, ?it/s]
 33%|███▎      | 5/15 [02:35<03:34, 21/usr/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.
  self.pid = os.fork()[00:00<?, ?it/s]
  1%|          | 1/84 [00:00<00:25,  3.27it/s]
epoch: 4 	loss: 0.000057   	accuracy: 0.9573 	precision: 0.7323 	recall: 0.7344 	f1: 0.7292






  self.pid = os.fork()[00:00<?, ?it/s]
 40%|████      | 6/15 [02:49<02:49, 18/usr/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.
  self.pid = os.fork()[00:00<?, ?it/s]
  5%|▍         | 4/84 [00:00<00:12,  6.63it/s]
epoch: 5 	loss: 0.000057   	accuracy: 0.9551 	precision: 0.8430 	recall: 0.8010 	f1: 0.8153






  self.pid = os.fork()[00:00<?, ?it/s]
 47%|████▋     | 7/15 [03:03<02:17, 17/usr/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.
  self.pid = os.fork()[00:00<?, ?it/s]
  5%|▍         | 4/84 [00:00<00:12,  6.52it/s]
epoch: 6 	loss: 0.000044   	accuracy: 0.9581 	precision: 0.7146 	recall: 0.7521 	f1: 0.7247






  self.pid = os.fork()[00:00<?, ?it/s]
 53%|█████▎    | 8/15 [03:17<01:53, 16/usr/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.
  self.pid = os.fork()[00:00<?, ?it/s]
  5%|▍         | 4/84 [00:00<00:12,  6.64it/s]
epoch: 7 	loss: 0.000029   	accuracy: 0.9858 	precision: 0.9807 	recall: 0.9274 	f1: 0.9504






  self.pid = os.fork()[00:00<?, ?it/s]
 60%|██████    | 9/15 [03:31<01:33, 15/usr/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.
  self.pid = os.fork()[00:00<?, ?it/s]
  6%|▌         | 5/84 [00:00<00:11,  6.70it/s]
epoch: 8 	loss: 0.000024   	accuracy: 0.9910 	precision: 0.9782 	recall: 0.9189 	f1: 0.9395






  self.pid = os.fork()[00:00<?, ?it/s]
 67%|██████▋   | 10/15 [03:45<01:15, 1/usr/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.
  self.pid = os.fork()[00:00<?, ?it/s]
  4%|▎         | 3/84 [00:00<00:12,  6.30it/s]
epoch: 9 	loss: 0.000018   	accuracy: 0.9933 	precision: 0.9968 	recall: 0.9592 	f1: 0.9770





 79%|███████▊  | 66/84 [00:08<00:02,  8.72it/s]
  self.pid = os.fork()[00:00<?, ?it/s]
 73%|███████▎  | 11/15 [04:00<00:59, 1/usr/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.
  self.pid = os.fork()[00:00<?, ?it/s]
  2%|▏         | 2/84 [00:00<00:15,  5.23it/s]
epoch: 10 	loss: 0.000013   	accuracy: 0.9933 	precision: 0.9968 	recall: 0.9592 	f1: 0.9770






  self.pid = os.fork()[00:00<?, ?it/s]
 80%|████████  | 12/15 [04:14<00:43, 1/usr/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.
  self.pid = os.fork()[00:00<?, ?it/s]
  1%|          | 1/84 [00:00<00:25,  3.28it/s]
epoch: 11 	loss: 0.000012   	accuracy: 0.9933 	precision: 0.9968 	recall: 0.9592 	f1: 0.9770






  self.pid = os.fork()[00:00<?, ?it/s]
 87%|████████▋ | 13/15 [04:28<00:29, 1/usr/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.
  self.pid = os.fork()[00:00<?, ?it/s]
epoch: 12 	loss: 0.000011   	accuracy: 0.9940 	precision: 0.9984 	recall: 0.9587 	f1: 0.9776
epoch: 12 	loss: 0.039903   	accuracy: 0.8862 	precision: 0.8479 	recall: 0.7933 	f1: 0.7833





  self.pid = os.fork()[00:00<?, ?it/s]
 82%|████████▏ | 9/11 [00:00<00:00, 24.74it/s]
epoch: 13 	loss: 0.000011   	accuracy: 0.9940 	precision: 0.9931 	recall: 0.9640 	f1: 0.9777
  self.pid = os.fork()[00:00<?, ?it/s]





  self.pid = os.fork()[00:00<?, ?it/s]
  9%|▉         | 1/11 [00:00<00:02,  4.95it/s]
epoch: 14 	loss: 0.000011   	accuracy: 0.9940 	precision: 0.9931 	recall: 0.9640 	f1: 0.9777
  0%|          | 0/11 [00:00<?, ?it/s]/usr/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.
  self.pid = os.fork()
  0%|          | 0/11 [00:00<?, ?it/s]/usr/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.
  self.pid = os.fork()
No traceback available to show.
OptimizedModule(
  (_orig_mod): BertForSequenceClassification(
    (bert): BertModel(
      (embeddings): BertEmbeddings(
        (word_embeddings): Embedding(32784, 768)
        (position_embeddings): Embedding(512, 768)
        (token_type_embeddings): Embedding(2, 768)
        (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
        (dropout): Dropout(p=0.1, inplace=False)
      )
      (encoder): BertEncoder(
        (layer): ModuleList(
          (0-11): 12 x BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1, inplace=False)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1, inplace=False)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
              (intermediate_act_fn): GELUActivation()
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1, inplace=False)
            )
          )
        )
      )
      (pooler): BertPooler(
        (dense): Linear(in_features=768, out_features=768, bias=True)
        (activation): Tanh()
      )
    )
    (dropout): Dropout(p=0.1, inplace=False)
    (classifier): Linear(in_features=768, out_features=5, bias=True)
  )
)
<class 'torch._dynamo.eval_frame.OptimizedModule'>
<class 'transformers.models.bert.modeling_bert.BertForSequenceClassification'>