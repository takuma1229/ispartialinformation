
/content/drive/MyDrive/research_discourse_relation/discourse_relation_explainability
/usr/local/lib/python3.10/dist-packages/huggingface_hub/utils/_token.py:88: UserWarning:
The secret `HF_TOKEN` does not exist in your Colab secrets.
To authenticate with the Hugging Face Hub, create a token in your settings tab (https://huggingface.co/settings/tokens), set it as secret in your Google Colab and restart your session.
You will be able to reuse this secret in all of your notebooks.
Please note that authentication is recommended but still optional to access public models or datasets.
  warnings.warn(
num_added_tokens: 16, added_special_tokens: <NOUN>,<PRONOUN>,<ADJECTIVAL-NOUN>,<PRENOUN-ADJECTIVAL>,<ADVERB>,<CONJUNCTION>,<INTERJECTION>,<VERB>,<ADJECTIVE>,<AUXILIARY-VERB>,<PARTICLE>,<PREFIX>,<SUFFIX>,<SYMBOL>,<AUXILIARY-SYMBOL>,<BLANK>
Some weights of BertForSequenceClassification were not initialized from the model checkpoint at cl-tohoku/bert-base-japanese-v3 and are newly initialized: ['classifier.bias', 'classifier.weight']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
/usr/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.
  self.pid = os.fork()




  0%|          | 0/15 [00:00<?, ?it/s]/usr/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.
  self.pid = os.fork()[00:00<?, ?it/s]
epoch: None 	loss: 0.065226   	accuracy: 0.2575 	precision: 0.1848 	recall: 0.2304 	f1: 0.1233




  self.pid = os.fork()[00:00<?, ?it/s]
  self.pid = os.fork()[00:00<?, ?it/s]
  7%|▋         | 1/15 [01:43<24:07, 10/usr/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.
  self.pid = os.fork()[00:00<?, ?it/s]
epoch: 0 	loss: 0.001796   	accuracy: 0.7865 	precision: 0.2677 	recall: 0.3051 	f1: 0.2843
epoch: 0 	loss: 0.026912   	accuracy: 0.7784 	precision: 0.2785 	recall: 0.3221 	f1: 0.2972





  self.pid = os.fork()[00:00<?, ?it/s]
 13%|█▎        | 2/15 [01:57<11:00, 50/usr/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.
  self.pid = os.fork()[00:00<?, ?it/s]
  1%|          | 1/84 [00:00<00:26,  3.13it/s]
epoch: 1 	loss: 0.001446   	accuracy: 0.8427 	precision: 0.4161 	recall: 0.4243 	f1: 0.4164






  self.pid = os.fork()[00:00<?, ?it/s]
 20%|██        | 3/15 [02:11<06:46, 33/usr/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.
  self.pid = os.fork()[00:00<?, ?it/s]
  4%|▎         | 3/84 [00:00<00:13,  6.04it/s]
epoch: 2 	loss: 0.000703   	accuracy: 0.8794 	precision: 0.4579 	recall: 0.4773 	f1: 0.4626






 71%|███████▏  | 60/84 [00:02<00:00, 33.58it/s]
epoch: 3 	loss: 0.000302   	accuracy: 0.9199 	precision: 0.6891 	recall: 0.5818 	f1: 0.5897
  self.pid = os.fork()[00:00<?, ?it/s]
 27%|██▋       | 4/15 [02:25<04:47, 26/usr/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.
  self.pid = os.fork()[00:00<?, ?it/s]






  self.pid = os.fork()[00:00<?, ?it/s]
 33%|███▎      | 5/15 [02:39<03:37, 21/usr/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.
  self.pid = os.fork()[00:00<?, ?it/s]
  1%|          | 1/84 [00:00<00:26,  3.10it/s]
epoch: 4 	loss: 0.000117   	accuracy: 0.9213 	precision: 0.5402 	recall: 0.5409 	f1: 0.5395






  self.pid = os.fork()[00:00<?, ?it/s]
 40%|████      | 6/15 [02:53<02:53, 19/usr/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.
  self.pid = os.fork()[00:00<?, ?it/s]
epoch: 5 	loss: 0.000064   	accuracy: 0.9670 	precision: 0.9568 	recall: 0.8012 	f1: 0.8337
epoch: 5 	loss: 0.033829   	accuracy: 0.8922 	precision: 0.6209 	recall: 0.6796 	f1: 0.6472





  self.pid = os.fork()[00:00<?, ?it/s]
 47%|████▋     | 7/15 [03:07<02:20, 17/usr/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.
  self.pid = os.fork()[00:00<?, ?it/s]
epoch: 6 	loss: 0.000042   	accuracy: 0.9678 	precision: 0.9686 	recall: 0.8431 	f1: 0.8879
epoch: 6 	loss: 0.035918   	accuracy: 0.8683 	precision: 0.6558 	recall: 0.6404 	f1: 0.6157





  self.pid = os.fork()[00:00<?, ?it/s]
 82%|████████▏ | 9/11 [00:00<00:00, 23.67it/s]
epoch: 7 	loss: 0.000030   	accuracy: 0.9775 	precision: 0.9836 	recall: 0.9176 	f1: 0.9464
  self.pid = os.fork()[00:00<?, ?it/s]






 20%|██        | 17/84 [00:00<00:02, 26.18it/s]
epoch: 8 	loss: 0.000026   	accuracy: 0.9850 	precision: 0.9827 	recall: 0.8755 	f1: 0.9122
epoch: 8 	loss: 0.030232   	accuracy: 0.8743 	precision: 0.6561 	recall: 0.6842 	f1: 0.6443
                                      /usr/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.
  self.pid = os.fork()[00:00<?, ?it/s]
 60%|██████    | 9/15 [03:36<01:35, 15/usr/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.
  self.pid = os.fork()[00:00<?, ?it/s]






 90%|█████████ | 76/84 [00:02<00:00, 34.90it/s]
epoch: 9 	loss: 0.000016   	accuracy: 0.9865 	precision: 0.8857 	recall: 0.9150 	f1: 0.8818
  self.pid = os.fork()[00:00<?, ?it/s]
 67%|██████▋   | 10/15 [03:51<01:17, 1/usr/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.
  self.pid = os.fork()[00:00<?, ?it/s]






  self.pid = os.fork()[00:00<?, ?it/s]
 73%|███████▎  | 11/15 [04:05<01:00, 1/usr/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.
  self.pid = os.fork()[00:00<?, ?it/s]
  2%|▏         | 2/84 [00:00<00:15,  5.43it/s]
epoch: 10 	loss: 0.000014   	accuracy: 0.9910 	precision: 0.9802 	recall: 0.8587 	f1: 0.8909






  self.pid = os.fork()[00:00<?, ?it/s]
 73%|███████▎  | 11/15 [04:19<01:00, 15.13s/it]
epoch: 11 	loss: 0.000011   	accuracy: 0.9940 	precision: 0.9984 	recall: 0.9587 	f1: 0.9776
 80%|████████  | 12/15 [04:20<00:44, 1/usr/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.
  self.pid = os.fork()[00:00<?, ?it/s]






  self.pid = os.fork()[00:00<?, ?it/s]
epoch: 12 	loss: 0.000011   	accuracy: 0.9940 	precision: 0.9938 	recall: 0.9633 	f1: 0.9777
epoch: 12 	loss: 0.040000   	accuracy: 0.9162 	precision: 0.9103 	recall: 0.8825 	f1: 0.8867
 87%|████████▋ | 13/15 [04:34<00:29, 1/usr/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.
  self.pid = os.fork()[00:00<?, ?it/s]






  self.pid = os.fork()[00:00<?, ?it/s]
 93%|█████████▎| 14/15 [04:49<00:14, 1/usr/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.
  self.pid = os.fork()[00:00<?, ?it/s]
  4%|▎         | 3/84 [00:00<00:13,  6.06it/s]
epoch: 13 	loss: 0.000010   	accuracy: 0.9940 	precision: 0.9938 	recall: 0.9633 	f1: 0.9777






  self.pid = os.fork()[00:00<?, ?it/s]
100%|██████████| 15/15 [05:04<00:00, 20.28s/it]
epoch: 14 	loss: 0.000010   	accuracy: 0.9940 	precision: 0.9931 	recall: 0.9640 	f1: 0.9777
epoch: 14 	loss: 0.040703   	accuracy: 0.8982 	precision: 0.9114 	recall: 0.7779 	f1: 0.8162
  0%|          | 0/11 [00:00<?, ?it/s]/usr/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.
  self.pid = os.fork()
  0%|          | 0/11 [00:00<?, ?it/s]/usr/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.
  self.pid = os.fork()
OptimizedModule(
  (_orig_mod): BertForSequenceClassification(
    (bert): BertModel(
      (embeddings): BertEmbeddings(
        (word_embeddings): Embedding(32784, 768)
        (position_embeddings): Embedding(512, 768)
        (token_type_embeddings): Embedding(2, 768)
        (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
        (dropout): Dropout(p=0.1, inplace=False)
      )
      (encoder): BertEncoder(
        (layer): ModuleList(
          (0-11): 12 x BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1, inplace=False)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1, inplace=False)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
              (intermediate_act_fn): GELUActivation()
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1, inplace=False)
            )
          )
        )
      )
      (pooler): BertPooler(
        (dense): Linear(in_features=768, out_features=768, bias=True)
        (activation): Tanh()
      )
    )
    (dropout): Dropout(p=0.1, inplace=False)
    (classifier): Linear(in_features=768, out_features=5, bias=True)
  )
)
<class 'torch._dynamo.eval_frame.OptimizedModule'>
<class 'transformers.models.bert.modeling_bert.BertForSequenceClassification'>
No traceback available to show.