
/content/drive/MyDrive/research_discourse_relation/discourse_relation_explainability
/usr/local/lib/python3.10/dist-packages/huggingface_hub/utils/_token.py:88: UserWarning:
The secret `HF_TOKEN` does not exist in your Colab secrets.
To authenticate with the Hugging Face Hub, create a token in your settings tab (https://huggingface.co/settings/tokens), set it as secret in your Google Colab and restart your session.
You will be able to reuse this secret in all of your notebooks.
Please note that authentication is recommended but still optional to access public models or datasets.
  warnings.warn(
num_added_tokens: 16, added_special_tokens: <NOUN>,<PRONOUN>,<ADJECTIVAL-NOUN>,<PRENOUN-ADJECTIVAL>,<ADVERB>,<CONJUNCTION>,<INTERJECTION>,<VERB>,<ADJECTIVE>,<AUXILIARY-VERB>,<PARTICLE>,<PREFIX>,<SUFFIX>,<SYMBOL>,<AUXILIARY-SYMBOL>,<BLANK>
Some weights of BertForSequenceClassification were not initialized from the model checkpoint at cl-tohoku/bert-base-japanese-v3 and are newly initialized: ['classifier.bias', 'classifier.weight']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
/usr/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.
  self.pid = os.fork()



 64%|██████▎   | 7/11 [01:20<00:26,  6.55s/it]
  0%|          | 0/15 [00:00<?, ?it/s]/usr/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.
  self.pid = os.fork()[00:00<?, ?it/s]




  self.pid = os.fork()[00:00<?, ?it/s]
 52%|█████▏    | 44/84 [00:01<00:01, 29.31it/s]
loss: 0.001795   	accuracy: 0.7865 	precision: 0.2677 	recall: 0.3051 	f1: 0.2843
  self.pid = os.fork()[00:00<?, ?it/s]
  7%|▋         | 1/15 [01:44<24:29, 10/usr/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.
  self.pid = os.fork()[00:00<?, ?it/s]





  self.pid = os.fork()[00:00<?, ?it/s]
  7%|▋         | 1/15 [01:58<24:29, 104.96s/it]
loss: 0.001401   	accuracy: 0.8487 	precision: 0.4214 	recall: 0.4237 	f1: 0.4192
 13%|█▎        | 2/15 [01:59<11:10, 51/usr/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.
  self.pid = os.fork()[00:00<?, ?it/s]





  self.pid = os.fork()[00:00<?, ?it/s]
 82%|████████▏ | 9/11 [00:00<00:00, 23.76it/s]
loss: 0.000879   	accuracy: 0.8727 	precision: 0.4768 	recall: 0.4251 	f1: 0.4403
  self.pid = os.fork()[00:00<?, ?it/s]






  self.pid = os.fork()[00:00<?, ?it/s]
loss: 0.000197   	accuracy: 0.9303 	precision: 0.7057 	recall: 0.6547 	f1: 0.6684
loss: 0.028655   	accuracy: 0.9102 	precision: 0.7060 	recall: 0.6937 	f1: 0.6906
 27%|██▋       | 4/15 [02:27<04:51, 26/usr/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.
  self.pid = os.fork()[00:00<?, ?it/s]






 95%|█████████▌| 80/84 [00:02<00:00, 36.73it/s]
loss: 0.000069   	accuracy: 0.9521 	precision: 0.7086 	recall: 0.7275 	f1: 0.7144
  self.pid = os.fork()[00:00<?, ?it/s]
 33%|███▎      | 5/15 [02:41<03:40, 22/usr/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.
  self.pid = os.fork()[00:00<?, ?it/s]






 81%|████████  | 68/84 [00:02<00:00, 33.80it/s]
loss: 0.000053   	accuracy: 0.9625 	precision: 0.7505 	recall: 0.7521 	f1: 0.7503
  self.pid = os.fork()[00:00<?, ?it/s]
 40%|████      | 6/15 [02:56<02:54, 19/usr/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.
  self.pid = os.fork()[00:00<?, ?it/s]






 73%|███████▎  | 61/84 [00:02<00:00, 33.57it/s]
loss: 0.000035   	accuracy: 0.9723 	precision: 0.9707 	recall: 0.8124 	f1: 0.8456
  self.pid = os.fork()[00:00<?, ?it/s]
 47%|████▋     | 7/15 [03:10<02:21, 17/usr/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.
  self.pid = os.fork()[00:00<?, ?it/s]






 62%|██████▏   | 52/84 [00:01<00:00, 32.58it/s]
loss: 0.000028   	accuracy: 0.9865 	precision: 0.9888 	recall: 0.9255 	f1: 0.9535
  self.pid = os.fork()[00:00<?, ?it/s]
 53%|█████▎    | 8/15 [03:24<01:56, 16/usr/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.
  self.pid = os.fork()[00:00<?, ?it/s]





  self.pid = os.fork()[00:00<?, ?it/s]
 82%|████████▏ | 9/11 [00:00<00:00, 22.53it/s]
loss: 0.000021   	accuracy: 0.9895 	precision: 0.9793 	recall: 0.9118 	f1: 0.9367
  self.pid = os.fork()[00:00<?, ?it/s]






  self.pid = os.fork()[00:00<?, ?it/s]
loss: 0.000024   	accuracy: 0.9865 	precision: 0.9831 	recall: 0.9348 	f1: 0.9552
loss: 0.042393   	accuracy: 0.8743 	precision: 0.8153 	recall: 0.7737 	f1: 0.7242
 67%|██████▋   | 10/15 [03:54<01:18, 1/usr/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.
  self.pid = os.fork()[00:00<?, ?it/s]






 67%|██████▋   | 56/84 [00:02<00:00, 29.94it/s]
loss: 0.000012   	accuracy: 0.9925 	precision: 0.9919 	recall: 0.9342 	f1: 0.9595
  self.pid = os.fork()[00:00<?, ?it/s]
 73%|███████▎  | 11/15 [04:08<01:01, 1/usr/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.
  self.pid = os.fork()[00:00<?, ?it/s]






  self.pid = os.fork()[00:00<?, ?it/s]
 82%|████████▏ | 9/11 [00:00<00:00, 23.30it/s]
loss: 0.000011   	accuracy: 0.9933 	precision: 0.9982 	recall: 0.9578 	f1: 0.9770
  self.pid = os.fork()[00:00<?, ?it/s]






 99%|█████████▉| 83/84 [00:02<00:00, 34.89it/s]
loss: 0.000010   	accuracy: 0.9940 	precision: 0.9897 	recall: 0.9679 	f1: 0.9778
  self.pid = os.fork()[00:00<?, ?it/s]
 87%|████████▋ | 13/15 [04:38<00:29, 1/usr/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.
  self.pid = os.fork()[00:00<?, ?it/s]






 80%|███████▉  | 67/84 [00:02<00:00, 32.83it/s]
loss: 0.000010   	accuracy: 0.9940 	precision: 0.9897 	recall: 0.9679 	f1: 0.9778
  self.pid = os.fork()[00:00<?, ?it/s]
 93%|█████████▎| 14/15 [04:52<00:14, 1/usr/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.
  self.pid = os.fork()[00:00<?, ?it/s]





 80%|███████▉  | 67/84 [00:08<00:01,  8.65it/s]
  self.pid = os.fork()[00:00<?, ?it/s]
100%|██████████| 15/15 [05:07<00:00, 20.47s/it]
  0%|          | 0/11 [00:00<?, ?it/s]/usr/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.
  self.pid = os.fork()
  9%|▉         | 1/11 [00:00<00:02,  3.78it/s]
loss: 0.000010   	accuracy: 0.9940 	precision: 0.9897 	recall: 0.9679 	f1: 0.9778
  0%|          | 0/11 [00:00<?, ?it/s]/usr/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.
  self.pid = os.fork()
OptimizedModule(
  (_orig_mod): BertForSequenceClassification(
    (bert): BertModel(
      (embeddings): BertEmbeddings(
        (word_embeddings): Embedding(32784, 768)
        (position_embeddings): Embedding(512, 768)
        (token_type_embeddings): Embedding(2, 768)
        (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
        (dropout): Dropout(p=0.1, inplace=False)
      )
      (encoder): BertEncoder(
        (layer): ModuleList(
          (0-11): 12 x BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1, inplace=False)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1, inplace=False)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
              (intermediate_act_fn): GELUActivation()
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1, inplace=False)
            )
          )
        )
      )
      (pooler): BertPooler(
        (dense): Linear(in_features=768, out_features=768, bias=True)
        (activation): Tanh()
      )
    )
    (dropout): Dropout(p=0.1, inplace=False)
    (classifier): Linear(in_features=768, out_features=5, bias=True)
  )
)
<class 'torch._dynamo.eval_frame.OptimizedModule'>
<class 'transformers.models.bert.modeling_bert.BertForSequenceClassification'>